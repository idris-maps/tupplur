import { html } from "../deps.ts";
import {
  isSchemaParam,
  Schema,
  SwaggerParameter,
  SwaggerParameterSchema,
  SwaggerParameterType,
  SwaggerPath,
  TagData,
} from "../types.ts";
import { schemaToExample } from "./schema-to-example.ts";
import { curlExample, fetchExample, orderParams } from "./utils.ts";

const IconWrapper = (content: string, className = "") =>
  html`
  <svg viewBox="0 0 24 24" class="${className}" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="width:1em;position:relative;top:0.15em;">
    ${content}
  </svg>`;

const IconDown = IconWrapper(
  html`<polyline points="6 9 12 15 18 9"></polyline>`,
  "icon-down",
);

const IconUp = IconWrapper(
  html`<polyline points="18 15 12 9 6 15"/>`,
  "icon-up",
);

const SchemaWithExample = (d: Schema) => {
  const id = crypto.randomUUID();
  return html`
      <div style="--tabs:2">
      <input type="radio" name="${id}" id="${id}_1" checked>
      <label for="${id}_1">Example</label>
      <div>
        <pre>${JSON.stringify(schemaToExample(d), null, 2)}</pre>
      </div>
      <input type="radio" name="${id}" id="${id}_0">
      <label for="${id}_0">Schema</label>
      <div>
        <pre>${JSON.stringify(d, null, 2)}</pre>
      </div>
    </div>
  `;
};

const SchemaParameter = (d: SwaggerParameterSchema) =>
  html`
    <h4>${d.in}</h4>
    ${
    d.description && d.description !== d.name
      ? html`<div class="param-description">${d.description}</div>`
      : ""
  }
    ${SchemaWithExample(d.schema)}
  `;

const OtherParameter = (d: SwaggerParameterType) => {
  let tableData = [["in", d.in], ["type", d.type]];
  if (d.required) tableData.push(["required", "true"]);
  if (d.description) tableData = [["description", d.description], ...tableData];

  return html`
    <h4>${d.name}</h4>
    <table>
      <tbody>
        ${
    tableData.map(([key, value]) => {
      return html`
            <tr>
              <th>${key}</th>
              <td>${value}</td>
            </tr>
          `;
    })
  }
      </tbody>
    </table>
  `;
};

const Parameter = (d: SwaggerParameter) =>
  isSchemaParam(d) ? SchemaParameter(d) : OtherParameter(d);

const Parameters = (parameters: SwaggerParameter[] = []) => {
  const params = parameters.filter((d) => d.in !== "path");
  if (!params.length) return undefined;
  return html`<h3>Parameters</h3>` +
    orderParams(params).map((d) => Parameter(d)).join("");
};

const Responses = (data: SwaggerPath) => {
  const parts = Object.entries(data.responses).map((
    [status, { schema, description }],
  ) =>
    html`
      <h4>${status}</h4>
      ${description ? html`<p>${description}</p>` : ""}
      ${schema ? SchemaWithExample(schema) : ""}
    `
  );

  return parts.length
    ? html`
    <h3>Responses</h3>
    ${parts.join("")}
  `
    : "";
};

const Requests = (
  host: string,
  path: string,
  method: string,
  data: SwaggerPath,
) => {
  if (data.consumes && !data.consumes.includes("application/json")) {
    return "";
  }

  const id = crypto.randomUUID();
  return html`
    <h3>Request</h3>
    <div style="--tabs:2">
      <input type="radio" name="${id}" id="${id}_0" checked>
      <label for="${id}_0">curl</label>
      <div>
        <pre>${curlExample(host, path, method, data)}</pre>
      </div>
      <input type="radio" name="${id}" id="${id}_1">
      <label for="${id}_1">js fetch</label>
      <div>
          <pre>${fetchExample(host, path, method, data)}</pre>
      </div>
    </div>
  `;
};

export const Path = (
  host: string,
  path: string,
  method: string,
  data: SwaggerPath,
) => {
  return html`
    <details>
      <summary>
        <div class="method method-${method}">${method}</div>
        <div class="path">${path}</div>
        <div class="icon">
          ${IconDown}
          ${IconUp}
        </div>
      </summary>
      <div class="path-details">
        ${Parameters(data.parameters)}
        ${Requests(host, path, method, data)}
        ${Responses(data)}
      </div>
    </details>
  `;
};

export const Tag = ({ name, description, paths, host }: TagData) =>
  html`
    <h2>
      ${name}
      ${description ? html`<small>${description}</small>` : ""}
    </h2>
    ${
    paths.map(({ path, method, data }) => Path(host, path, method, data)).join(
      "",
    )
  }
  `;

export const Logo = html`
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><title>Tupplur</title><path fill="currentColor" d="M49.835655 1.9306338c-.547552 0-.642933.11108-.642933.74985 0 .63861-.09497.74984-.641955.74984-.52308 0-.627471.10435-.562382.56238.05243.36913.251353.56238.579468.56238.379415 0 .518851.19231.577516.79818.06516.67314-.04225.85958-.683451 1.19116-1.494755.77296-2.024153 3.1741104-.990027 4.4888002.290625.36945.487478.70274.437409.74105-.05004.0384-1.346076.19609-2.87977.35053-8.798232.88594-14.538813 4.46744-17.024276 10.6208-.695814 1.72272-1.55379 4.97342-1.38594 5.25088h.0005c.06528.10793 1.202445.16417 2.526815.12498l2.407699-.0713.208942-.9998c1.264206-6.05641 3.505034-9.39963 7.55555-11.2711 1.057574-.48861 1.980463-.83092 2.050841-.76056.07036.0704-.398908.77472-1.042751 1.56511-2.162128 2.65421-3.301508 5.8178-3.436305 9.54097l-.06981 1.92538H41.81975l.156705-3.24933c.225948-4.68529.738931-6.73823 2.146036-8.58805.580094-.7626 2.263911-1.76573 2.986681-1.77941.216919-.004.254809 1.73287.149383 6.8682l-.141084 6.87356h5.405609l-.162564-6.87356c-.10946-4.62192-.07908-6.87357.09275-6.87357.516119 0 2.123805.78911 2.697191 1.32395 1.548355 1.44428 2.341966 4.17456 2.521446 8.67396l.144501 3.62425 2.561964.0708 2.561964.0708-.0044-1.69594c-.0093-3.64924-1.439923-7.59107-3.644258-10.04281-.640449-.71235-1.108218-1.35121-1.039822-1.41963.218222-.21823 2.712817.88284 4.127556 1.82188.751781.49902 1.813709 1.47268 2.359857 2.16362 1.714942 2.16957 2.297525 3.58327 3.413839 8.28097l.178186.74984 2.343747.0727c1.288833.0398 2.438586-.023 2.555131-.13962.350979-.35098-.719672-4.03978-1.830185-6.30631-.782899-1.59789-1.480333-2.56341-2.813377-3.89469-3.337342-3.3329-7.398297-4.9948-13.770071-5.63554-1.649656-.16589-3.033287-.32668-3.075041-.35686-.04177-.0301.154596-.43305.436432-.89533.286883-.47055.513062-1.2735298.513564-1.8248198.00075-.85127-.161526-1.1391404-1.197015-2.1245604-1.348131-1.28296-1.475879-2.11598-.387614-2.52972.750383-.28532.657434-.79071-.18258-.99051-.485528-.11551-.590592-.27869-.526257-.81918.06897-.57921-.01085-.67466-.562382-.67466zM38.373206 29.068514c-1.469183-.005-2.866051 1.53231-2.064999 3.08138.37095.71733.36812.72187-.454982.87629-1.881547.35298-2.605786 2.47128-1.293675 3.78339.884328.88433 2.222905.84093 3.102379-.10056l.666854-.7142.654159.7142c.702884.76712 1.810761.94586 2.748937.44376.625514-.33478 1.262529-1.7956 1.047633-2.40282-.288618-.81558-1.150647-1.5657-1.977614-1.72084-.794735-.14909-.806131-.16906-.498919-.89971.407097-.96823.240029-1.77549-.515029-2.48483-.427016-.40117-.925019-.57436-1.414744-.57606zm11.444387.007c-1.647277 0-2.683426 1.8372-1.881444 3.33573.20563.38422.121108.47782-.550666.61217-1.260851.25218-1.941977 1.05953-1.941977 2.30128 0 .85071.132003 1.16615.659042 1.58071.972164.76472 2.235205.68396 3.056978-.19576l.666854-.7142.65416.7142c.863849.94283 2.211946.98662 3.097985.10058 1.312713-1.31272.587565-3.4301-1.295627-3.78339-.708786-.13299-.793737-.22235-.584839-.61266.803529-1.50142-.231511-3.33866-1.880466-3.33866zm11.498085 0c-1.27963 0-2.124557.89624-2.124557 2.25343 0 .58656.131886 1.14797.293397 1.24779.172981.1069-.174743.31781-.846015.51357-.905726.26407-1.223737.51044-1.550457 1.19894-.364733.76857-.370541.96296-.05223 1.72474.197324.47228.565715.97941.819165 1.12672h.0005c.889949.51732 2.088007.33291 2.801661-.43106l.666852-.7142.654161.7142c1.378342 1.50436 3.711626.57361 3.711626-1.48064 0-1.14068-.722878-1.96179-1.941976-2.20559-.671775-.13435-.756295-.22795-.550665-.61217.80198-1.49851-.234169-3.33573-1.881445-3.33573zm-34.442022.0244c-.672774.002-1.251061.26383-1.115489.64147.06103.16994.717077 1.96806 1.45819 3.99575l1.347376 3.68672h.794266c1.153867 0 2.19079-1.27328 1.999095-2.45455-.181285-1.11712-.775218-1.74667-1.834576-1.9454-.663839-.12452-.817473-.25163-.68687-.56726.59979-1.44952.201409-2.66491-1.044213-3.18536-.286468-.1197-.611975-.17234-.917779-.17137zm45.881037.002c-.309665.00095-.640159.0567-.933397.17916-1.307377.54624-1.673608 1.67783-1.028105 3.17559.137348.31868-.01535.44248-.703956.57167-1.783717.33461-2.435558 2.221-1.253155 3.6262.471908.56084.86099.76867 1.437199.76789.79005-.00092.79029-.00092 2.137249-3.68672.740897-2.02711 1.399007-3.82436 1.462584-3.99427.142935-.38225-.437154-.64202-1.118419-.63952zm-43.717426 9.0357c-.05649.008-.09031.0545-.09031.14889 0 .19289 2.24753 6.16457 2.492157 6.62168.215785.40275 1.432153.42998 18.424859.41006l18.193464-.021 1.321501-3.4729c.726708-1.90995 1.262071-3.53131 1.190181-3.60325-.07193-.0719-.502427.29933-.956832.825-.707387.81836-.925279.93091-1.516283.78256-.388304-.0974-.87447-.49702-1.111096-.9129-.532876-.93653-.728565-.92821-1.557292.0644-.565279.67711-.844721.80645-1.737919.80645-.893206 0-1.17214-.12934-1.73743-.80645-.778013-.93193-1.137786-1.00579-1.510426-.30951-.757769 1.4159-2.996041 1.54935-4.09436.24408-.34309-.40775-.745088-.74105-.893367-.74105-.148286 0-.596203.36554-.995398.81233-.622435.69663-.89198.81233-1.891695.81233-.999713 0-1.268781-.1157-1.891206-.81233-.399194-.44679-.785571-.81233-.858219-.81233-.07261 0-.458526.36554-.857731.81233-.622425.69663-.891991.81233-1.891694.81233-.999714 0-1.268782-.1157-1.891207-.81233-.399204-.44679-.84185-.81233-.983193-.81233-.141353 0-.58351.36554-.982705.81233-.623587.69791-.89104.81233-1.898528.81233-1.01726 0-1.262395-.10765-1.850688-.81233-.37299-.44679-.774451-.81233-.891904-.81233-.117444 0-.516152.36282-.886532.80648-.56529.67711-.844722.80645-1.73792.80645-.901879 0-1.17055-.12789-1.764766-.83967-.711111-.85179-1.484555-.93613-1.484555-.16206 0 .55231-1.147882 1.2179-1.812608 1.05106-.3117-.0782-.768942-.48411-1.015901-.90217-.28605-.48427-.660852-.8187-.830394-.79621zm-7.691264 7.08932-1.405956.992c-.773398.5454-1.729968 1.24978-2.126018 1.56559l-.72056.57408 2.24026.66833c1.232008.3674 2.520968.7668 2.864634.88752.343686.1207 1.441404.4622 2.438946.75912.997546.29686 1.766345.61637 1.708625.70979-.05781.0935-.901932.55539-1.876074 1.02664-.974138.47126-1.771601.93066-1.771601 1.02079 0 .0901 1.377836.41107 3.06186.71275 1.684023.30166 5.086442.92319 7.560919 1.38154 2.474491.45838 4.64514.84737 4.823213.86406.239325.0226.280342-.2137.157193-.90652-.09163-.51553-.258405-1.03751-.370528-1.15944-.112134-.12193-1.698176-.65839-3.524167-1.19213-1.82598-.53376-3.423532-1.07393-3.550528-1.20092-.141218-.14122.221297-.45073.9334-.79671.640336-.31108 1.129592-.66956 1.087176-.79671-.04242-.12714-2.654318-1.32882-5.803962-2.67034zm57.193614 0-5.726831 2.43944c-3.149649 1.34152-5.761546 2.5432-5.803962 2.67034-.04239.12715.446849.48563 1.087175.79671.712111.34595 1.074631.65549.9334.79671-.126983.12699-1.724547.66716-3.550528 1.20092-1.825981.53374-3.412032 1.0702-3.524166 1.19213-.112124.12193-.280924.65404-.374922 1.18238-.169145.95025-.163362.95927.532114.80941.386687-.0833 2.615086-.49253 4.95209-.90949 2.337019-.41696 5.570711-.9952 7.185999-1.28488 1.61529-.28972 2.936886-.60045 2.936886-.69028 0-.0898-.796973-.54904-1.771112-1.02032-.974139-.47125-1.818353-.9332-1.876073-1.02664-.05778-.0935.711089-.41293 1.708628-.70979.997549-.29689 2.094777-.63842 2.438453-.75912.343685-.12072 1.633113-.52012 2.865126-.88752l2.239764-.66833-.720064-.57408c-.39605-.31581-1.352618-1.02019-2.126021-1.56559zm-30.327158 2.59063c-.367352-.009-.724923.0629-1.106214.21334-.09042.0357-.264148.12969-.58728.3178-.500904.29159-.72032.44298-1.163819.80501-1.746452 1.42565-3.507518 3.68595-4.925729 6.32092-1.533538 2.84928-2.413372 5.77772-2.347653 7.8143.01582.49079.13173.96347.327079 1.33517.291932.55544.772045 1.00249 1.632471 1.5192l.284609.17087.101541-.17721c.05563-.0975.688253-1.19802 1.406445-2.44576.718196-1.24777 1.306981-2.27195 1.30832-2.2759.0015-.004-.0495-.0424-.113257-.0854-.143251-.0967-.283838-.22443-.40226-.36565-.110575-.13182-.270395-.42418-.328544-.60045-.121801-.36922-.160774-.81975-.111794-1.29368.06212-.60124.237209-1.22369.531139-1.88875.523964-1.18548 1.327152-2.27488 2.217799-3.0067.941434-.77358 1.858772-1.01078 2.59272-.67028.125705.0584.133065.0598.150359.0268.01003-.019.643043-1.12032 1.406932-2.44726.763896-1.32693 1.38982-2.41508 1.390823-2.41795.0032-.01-.500118-.28754-.728363-.40177-.574618-.28756-1.063024-.43455-1.535324-.44668zm3.129229.89874c-.218122-.008-.412157.0978-.543344.30219-.02528.0395-.641653 1.10694-1.369343 2.37155-1.093559 1.90048-1.328579 2.31864-1.355185 2.41209-.03385.11855-.03172.26033.0054.36858.04361.12735.11973.2261.23872.31098.136483.0974 1.487989.8627 1.576818.89289.06485.022.133477.0294.222611.0234.126475-.008.132319-.0106.273868-.0937.127603-.0749.150518-.0934.196737-.16062.0778-.11302 2.691938-4.6637 2.730874-4.75388.07613-.17624.0542-.39629-.04345-.56531-.03256-.0563-.07344-.10685-.122045-.14842-.03575-.0305-.395022-.24616-.798661-.47889-.623629-.35958-.752724-.42824-.858708-.45693-.05243-.0142-.103923-.022-.154264-.0239zm-38.949869 5.90062-1.53288 1.69252c-2.6335801 2.90809-3.0645899 2.60858 3.76435 2.6186l5.950413.008-1.562173 1.48504c-.8592.8166-1.56217 1.5608-1.56217 1.65395 0 .16342.94726.12391 9.622985-.40079l3.999164-.24164.929984-1.06961c.511411-.58815.933525-1.13946.937305-1.22534.01474-.30899-1.611411-.46865-4.772931-.46865-1.76994 0-3.218077-.10186-3.218077-.22651 0-.12467.562377-.69767 1.249738-1.27318.687354-.57548 1.249739-1.13271 1.249739-1.23802 0-.10527-.927929-.25539-2.062069-.3339-1.134141-.0785-4.521615-.33148-7.527718-.56191zm75.101494 0-5.465655.41886c-3.006109.23043-6.393591.48289-7.527725.56141-1.134138.0785-2.062066.2291-2.062069.33441 0 .10527.56239.6625 1.249739 1.238.687352.57549 1.249739 1.1379 1.249739 1.25022 0 .11235-1.734088.24283-3.853685.28952-2.119597.0467-3.931671.16266-4.026991.25824-.09533.0956.238963.67706.743008 1.29221 1.032786 1.26036.419207 1.13281 7.762538 1.61831v-.0005c4.026361.26622 6.873563.33215 6.873563.15917 0-.0722-.70297-.79929-1.562173-1.61589l-1.562174-1.48454 5.950907-.009c6.828925-.01 6.397438.28997 3.763861-2.61812zm-31.648171.29876-.41593.0903c-1.333932.2906-2.336004 1.19375-2.615176 2.35744-.149129.62164-.131769.8305.124486 1.53533.261121.7182.267286.80528.05272.72835-.5967-.21396-2.114867-.48578-2.722088-.48768l-.6649-.002.871888.85043c.479471.46757.825067.89436.767906.94852-.05716.0542-.512388.2262-1.011019.38274l-.90606.2846 1.036404.65953c1.081195.68716 1.812626 1.31735 1.675919 1.44453-.04393.0409-.581998.20396-1.196039.36222-2.751665.70931-3.850112 2.01378-2.675222 3.17709.643942.63759 1.965355.24049 3.447522-1.03593.478482-.41207.910615-.74935.95976-.74935.268144 0-.422883 2.22776-1.588536 5.12245-.635752 1.57878-1.096915 2.96366-1.386916 4.1959a14.413385 14.413385 0 0 0 11.37067-5.68141c-.43117-1.20708-.928051-2.29812-1.547528-3.44411-.37078-.68593-1.050746-1.73501-1.511403-2.33156l-.837716-1.08472.480857-.0678c.264499-.0372 1.294796-.10607 2.289561-.15279.994764-.0468 1.825833-.10107 1.846782-.12057.02093-.0195-.03554-.28465-.125951-.58926-.237829-.8012-1.267367-1.71248-2.068415-1.83164-.346589-.0516-.630239-.14429-.630239-.20553 0-.0612.391135-.43568.868959-.83233l.868959-.72105-.37785-.27094c-.977564-.70116-2.704798-.74318-3.763862-.0913l-.617547.38077v-1.41035zm-2.040101 5.7327c.436316 0 .982215.44698.982215.80451 0 .33518-.623228.91681-.982215.91681-.204412 0-.488893-.15729-.668807-.37005-.172225-.20368-.31341-.44981-.31341-.54676 0-.35753.545899-.80451.982217-.80451zm-9.731854.70688v.00047c-.0315-.00092-.06335.00002-.0952.003-.06676.007-.106207.0225-.219681.0874-.132701.0759-.140868.0832-.20894.18353-.113633.16766-2.704011 4.68177-2.737221 4.77001-.03415.0908-.04451.22909-.02441.33392.01748.0913.118034.26807.191366.33733.05365.0506 1.442379.86175 1.57389.91924.245726.10745.545605.0424.720064-.15622.09488-.10805 2.754738-4.73711 2.795803-4.86568.05013-.15684.02664-.33411-.05223-.48038-.04733-.0878-.114525-.16428-.197714-.2187-.11452-.0749-1.381195-.80342-1.484553-.85381-.07561-.0368-.166652-.0573-.261176-.0601zm27.280431 2.395c-.05377.00075-.08545.005-.09324.0127-.0623.0623.289514.71168.782062 1.44305 1.001203 1.48671 1.139704 2.07261.437408 1.84971-1.096663-.34805-9.430319-2.07722-9.578076-1.98736-.248528.15109.665783 2.38683 1.063743 2.60101.191977.10333 2.598587.8386 5.348002 1.63443 2.749431.79584 6.06748 1.75653 7.373459 2.1348 3.489551 1.01072 3.463389 1.02626 1.965412-1.15016-.710799-1.03271-1.241193-1.92894-1.178466-1.99175.06276-.0627 2.02033.28486 4.350166.77229 2.329836.48742 4.679705.9512 5.221564 1.03102l.985147.1455-.573611-.97687c-1.848228-3.14631-2.192786-3.63066-2.646909-3.72529-.274942-.0572-1.849613-.2829-3.499269-.50135-1.649655-.21845-4.560307-.62112-6.468373-.89484-1.669546-.23948-3.1126-.40179-3.489019-.39689zm-42.889962.006c-.715675.0228-3.804762.43393-11.460497 1.51773-1.27645.18071-2.36114.37132-2.41112.42373-.0499.0524-.66551 1.05173-1.36739 2.22024-.88946 1.48084-1.17249 2.147-.93437 2.19876.18789.0408 1.45368-.15589 2.81289-.4369 1.35921-.28105 3.53441-.73195 4.833949-1.00225 1.299526-.27029 2.413978-.44087 2.476045-.37882.06207.0621-.469129.95758-1.17993 1.99031-.721877 1.04884-1.148581 1.87802-.966594 1.87802.179188 0 1.8404-.43459 3.691121-.96561 9.560142-2.74303 11.642195-3.35759 11.961858-3.53051.398165-.2154 1.312568-2.45101 1.064231-2.60201-.147759-.0898-8.48142 1.63934-9.578076 1.98739-.702299.2229-.563797-.363.437408-1.84971.492547-.7314.847058-1.37807.78792-1.4372-.01181-.0118-.06518-.0165-.167445-.0131zm4.361394 6.72708c-.203883-.00099-1.460672.42957-2.920778 1.0037-1.557444.61242-4.103479 1.60301-5.657997 2.20121l-2.826557 1.08768-1.10963 1.82771c-.610333 1.00529-1.291499 2.10549-1.513849 2.44482-.22235.33933-.32356.61707-.22456.61705.099 0 2.304698-.91946 4.90132-2.04302 2.596635-1.12354 4.785322-1.97839 4.863731-1.89999.07841.0784-.265696.95296-.76449 1.94342-.498804.99049-.862255 1.84519-.807936 1.89953.05432.0543 1.214528-.48312 2.578074-1.1941 1.363557-.71097 3.828692-1.99554 5.478347-2.85488 2.595653-1.35211 3.039967-1.67433 3.298141-2.39353.164071-.4571.304876-1.09722.312435-1.42255.01682-.70537.143982-.7344-3.698448.8377-1.560533.63849-2.883322 1.11487-2.939815 1.05839-.05649-.0566.184741-.75273.53602-1.54706.351282-.79431.586513-1.49654.522842-1.5602-.0038-.004-.01324-.006-.02685-.006zm34.235033 0c-.0136.00006-.02237.002-.02636.006-.06367.0637.171562.76589.522841 1.5602.351281.79433.592514 1.49056.53602 1.54705-.05654.0565-1.379274-.41989-2.939815-1.05838-3.84243-1.5721-3.715259-1.54308-3.698446-.8377.0077.32533.148351.96842.312436 1.4289.269386.75602.758934 1.07736 5.047285 3.31326 2.611947 1.36184 5.030199 2.63185 5.373877 2.82266 1.249694.69375 1.253646.64079.109352-1.63151-.48997-.97294-.826787-1.8328-.748378-1.9112.07843-.0784 2.288371.78566 4.911081 1.9205 2.622707 1.13484 4.804778 2.02615 4.849084 1.98053.04435-.0456-.580539-1.15683-1.38887-2.46873l-1.469907-2.38523-2.818746-1.08425c-1.550294-.59657-4.092743-1.58589-5.650187-2.19829-1.460105-.57412-2.71738-1.00458-2.921265-1.00369z" /><g aria-label="Tupplur" fill="currentColor"><path d="M-34.944965 147.70915h2.032v-9.22337h3.540125v-1.79388h-9.096375v1.79388h3.52425zM-26.150239 139.9939h-2.016125v4.92125c0 1.778 1.095375 2.921 2.746375 2.921.889 0 1.762125-.33337 2.44475-.96837l.34925.84137h1.444625v-7.71525h-2.016125v5.5245c-.4445.34925-.9525.55563-1.508125.55563-1.04775 0-1.444625-.6985-1.444625-1.60338zM-19.022373 151.15403h1.9685v-3.96875c.492125.4445 1.143.68262 1.905.68262 2.079625 0 3.571875-1.7145 3.571875-4.14337 0-2.30188-1.381125-3.88938-3.3655-3.88938-.936625 0-1.762125.36513-2.3495 1.016l-.365125-.85725h-1.36525zm3.508375-9.60438c1.158875 0 1.889125.889 1.889125 2.33363 0 1.397-.66675 2.27012-1.793875 2.27012-.682625 0-1.285875-.33337-1.635125-.87312v-3.07975c.396875-.41275.9525-.65088 1.539875-.65088zM-9.9259989 151.15403h1.9685v-3.96875c.492125.4445 1.143.68262 1.905.68262 2.079625 0 3.571875-1.7145 3.571875-4.14337 0-2.30188-1.381125-3.88938-3.3655-3.88938-.936625 0-1.762125.36513-2.3495 1.016l-.365125-.85725h-1.36525zm3.508375-9.60438c1.158875 0 1.889125.889 1.889125 2.33363 0 1.397-.66675 2.27012-1.793875 2.27012-.682625 0-1.285875-.33337-1.635125-.87312v-3.07975c.396875-.41275.9525-.65088 1.539875-.65088zM1.2499987 147.82028c.492125 0 1.04775-.0952 1.476375-.28575l-.428625-1.34938c-.174625.0635-.34925.0952-.492125.0952-.460375 0-.714375-.3175-.714375-.85725v-9.44562H-.90900128v9.69962c0 1.3335.809625 2.14313 2.15899998 2.14313zM5.6632259 139.9939h-2.016125v4.92125c0 1.778 1.095375 2.921 2.746375 2.921.889 0 1.762125-.33337 2.44475-.96837l.34925.84137h1.4446251v-7.71525H8.6159759v5.5245c-.4445.34925-.9525.55563-1.508125.55563-1.04775 0-1.444625-.6985-1.444625-1.60338zM12.806969 147.70915h2.016125v-5.09587c.460375-.55563 1.11125-.87313 1.825625-.87313.365125 0 .746125.0794 1.04775.22225l.460375-1.778c-.34925-.17462-.777875-.26987-1.190625-.26987-.92075 0-1.778.46037-2.365375 1.22237l-.1905-1.143h-1.603375z" transform="translate(59.69249 -44.918497) scale(.9446845)"/></g></svg>
`;

export const PageWrapper = (main: string, css?: string) =>
  html`
    <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no">
        <title>Tupplur</title>
        ${css ? html`<style>${css}</style>` : ""}
      </head>
      <body>
        <header>${Logo}</header>
        <main>${main}</main>
      </body>
    </html>
  `;
